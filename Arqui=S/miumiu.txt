american teenager - Ethel cain

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "TabladeSegmento.h"

typedef struct {

    char identificador[5];
    uint8_t version;
    uint16_t TamanioCodigo;

}Theader;

int main()
{

    Theader header;

    void SetTabla(tabla,TamanioCodigo);


    return 0;
}

Tabla de Segmentos 
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "TabladeSegmento.h"

void setBaseCS(int tabla[][COL], uint16_t valor){
    valor = 0;
    tabla[0][0] = valor;
}
void setTamanioCS(int tabla[][COL],uint16_t valor){
    tabla[0][1] = valor;
}
void setBaseDS (int tabla[][COL], uint16_t valor){
    tabla[1][0] = valor;
}
void setTamanioDS(int tabla[][COL], uint16_t valor){
    tabla[1][1] = valor;
}

-----------------------------------------------------------------------------

Leer las instrucciones
Primero debemos sacar el byte uint_8

//PP
uint8_t opcode   = (instruccion & 0xF0) >> 4;
uint8_t operando = instruccion & 0x0F;

Unit8_t OpB,OpA,CodOperacion;
-------------------------------------//-----------------

typedef struct {

	int8 OpB,OpA,CodOperacion;

}TDatos;

Primero va a leer la instrucción

Tdatos componentes;

While (fread(&instrucción , sizeof(uint8_t) , 1 , archb) == 1){
	
	componentes = obtener_abc(instruccion);	
	BOOperaciones(componentes);
	

}


***

Void BOOperaciones(Componentes){
	
	Swiych (componentes.instruccion) {
	
		Case 0x00 : MOV
			breack;
		Case 0x01 :
	
	}
	

}


TDatos abc_comp(_int8 instruccion){
	
	Tdatos aux;
	
	aux.OpB = (instruccion >> 6 ) & 0x3 ;
	aux.OpA = (instrucción >> 4 ) & 0x3 ;
	aux.CodOperacion = instruccion & 0x1F ;

	return aux;

}

/// Inicia registro CS DS IP 

IniciaRegistros( Componentes *comp ){
	
	(*comp).registros[0] = 0 ;
	(*comp).registro [1] = 10 ;
	(*comp).registro[5] = 0;

}


int main ()
{

	TDatos abc ;
	Theader header;
	Componentes componente;	
	int8_t instruccion ;
	int i=0;
	
	LeeArchivo(comp);
	IniciaRegistros(comp);
	
	while (componentes.Error == 0 ){ //
		instrucción = componentes.memoria[i];
		abc = obtener_abc(instruccion);
		//Que llame al disassembler.
    		EjecutarOperacion(abc,&componentes);
		i++;
	}

	// Llama a una función que dice porque corto;
		
// Disassembler

//total de funciones 30 para que se corresponda directamente con el hexadecimal 

void Disassembler(componentes comp, TDatos abc,int i){
	
	char operaciones[Total] = ["SYS","JMP","..."] //Todas las funciones
	char registros[total16] = ["..."] // Todos los registros pero solo va a ontener un char
	
	printf("[%04d]\t %x",i,comp.memoria[i]);
	printf("%s \t ",abc.codigo); // Va a escribir primero el MNEM
	Op_AB(abc.OpB,comp,&auxb); // aux va a ser un String;
	SAme a la fucnion pero con auxb
	printf("|");
	Significado(auxa);
	Significado(auxb);
	printf("\n");
}	

void Op_AB( TDatos Op ,Componentes comp,int32_t  aux){

	aux=0;
	
	switch (Op){
		case 0b01: //Es registro
			final =1;
			break;
		case 0b10: // Es inmediato
			final=2;
			break;
		case 0b11: //Es memoria
			final = 3;
			break;
		for(inicio=i;inicio <= final;i++){ //  Imprime los valores de los bits en hexadeimal
			printf("%x\t",comp.memoria[inicio]);
			*aux=comp.memoria[inicio];
			*aux= *aux << 8; // Va a correr para hacer entrar los otros o bits;
		}
		
	}


}
void Significado(int8_t Op,int32_t auxiliar){
	
	//Aquí em conviene crear el vector con los registros, 

	siwtch(op){
		case 0b01:
			aux1= (auxiliar >> 2) & 0x00000003 // quiero tomar los últimos dos
			aux2= (auxiliar >> 2) & 0X0000000F //Quiero los últimos cuatrp
			if(aux1 == 0b00) // Es completo
				printf("E%cX\t",registro[aux2]);
			else
				if( aux1 == 0b01) // Es el uato bite
					printf("%cL",registro[aux2]);
				else
					if (auxx1 == 0b10) //
						printf("%cH",registro[aux2]);
					else
						printf("%cX",(registro[aux2])[1]);
			break;
		case 0b10: // Es un inmediato
			printf("%d",auxiliar);
			break;
		case 0b11: // Es en memoria
			aux1=(auxiliar >> 4) & 0X0000000F ;//Quiero los 4 de registro
			aux2=(auxiliar >> 4) ; 
			if(aux2 > 1)
				printf("[E%cX + %d ]",registro[aux1],aux2);
			else
				printf("[%s]",registro[aux1]);

	}
}

/// 






-----------------------------------------------------------------------------------------------

// Dentro de la función SYS 

if (opA == 0x2)
{

 ** Llamaa a la función de escritura;

}

//

Imprime_SYS(Toperando a, componentes *comp)
{

-> Tenemos que sacar el valor de EDX
-> Luego tenemos que sacar de ECX la cantidad de celdas CL y CH la cantidad de bite
-> De EAX -AL dbemos sacar el formato que vamos a escribir 1 byte
  

Escribir(Toperando op, componentes comp)
{

intceldas=0;

ind= (*comp).Registro[13] ;
cantidad_cl = (*comp).registro[12] & 0xFF ;	
cantidad_ch =( (*comp).registro[12] >> 8 ) & OxFF;
formato = (*comp).memoria & 0xFF ;


switch(cantidad_cl)
	Asignar la mascara;

printf("[04X] : ",ind);


for( i=0 ; i < cantidad_cl ; i++)
{

		
	if(formato & 0x01 == 0x01 )
						
		printf("%d\t",(*comp).memoria[ind] & celdas);

	if(formato & 0X02 == 0x02)

		printf("%c\t",(*comp).memoria[ind]);

	if(formato & 0x04 == 0x04)

		printf("%O\t",(*comp).memoria[ind]);

	if(formato & 0x08 == 0x08)
		
		printf("%X\t",(*comp).memoria[ind]);
	
	if (formato & 0x10 == 0x10)

		printf("%b\t",(*comp).memoria[ind]);

	ind ++;
	i++
	printf("\n");

}

}

------------------------------------
//Necesito que de la lectura de archivo obtener hasta donde llego i (fin en el carga de memoria)

    if (strcmp(argv[2],"-d"))

while(i < fin ){ //fin-1 tengo que probar 

        instruccion = comp.memoria[i];
        abc = obtener_abc(instruccion);
        Disassembler(comp,abc,&i);
}



void Disassembler(Componentes comp,TDatos abc, int * i)
{

    stringg Operaciones[TOTAL] = {"SYS","JMP","JZ","JP","JN","JNZ","JNP","JNN","NOT","","","","","","","STOP","MOV","ADD","SUB","SWAP","MUL","DIV","CMP","SHL","SHR","AND","OR","XOR","LDL","LDH","RND"};
    int32_t auxb,auxa;
    int ind=*i;

    printf("[%04X]\t %02X\t",*i,comp.memoria[*i]);
    // Muestra los valores en hexadecimal.
    auxa=auxb=0X0;
    Op_AB(abc.OpB,comp,&auxb,&ind);
    Op_AB(abc.OpA,comp,&auxa,&ind);

    printf("|\t");

    printf("%s\t",Operaciones[abc.CodOperacion]);

    if(abc.OpA != 0x0)
    {
        Significado(abc.OpA,auxa);
        printf(",\t");
    }

    Significado(abc.OpB,auxb);
    printf("\n");
    *i = ind+1; // Suma más uno para que avance a la siguiente instrucción ya que tiene solo la suma de los byte de cada operador (A(byte) + B(byte) + 1)

}


void Op_AB(int8_t Op, Componentes comp, int32_t *aux,int *i)
{

   int finall,inicio=1;

   switch(Op){

        case 0b00 :

            finall = 0; // No entra nunca al ciclo for
            break;

        case 0b01 :     // Es registro

            finall = 1;
            break;

        case 0b10 :     // Es inmediato

            finall = 2;
            break;

        case 0b11 :     // Es memoria

            finall = 3;
            break;

   }

    while ( inicio <= finall ){

        (*i)++;
        *aux = *aux << 8;
        printf("%02X\t",comp.memoria[*i]);
        *aux =(*aux) | comp.memoria[*i];
        inicio ++;

   }

}

void Significado(int8_t op, int32_t auxiliar)
{

    int8_t aux1=0,aux2=0;
    stringg Registross[TOTALR] = {"CS","DS"," "," "," ","IP"," "," ","CC","AC","EAX","EBX","ECX","EDX","EEX","EFX"};

    switch(op){

        case 0b01:

            aux1 = (auxiliar >> 2) & 0x03;
            aux2 = (auxiliar >> 4) & 0x0F;
            if(aux1 == 0b00)                                        // Registro completo

                printf("%s",Registross[aux2]);

            else
                if (aux1 == 0b01)                                  // 1 byte de registro (XL)

                    printf("%cL",Registross[aux1][1]);

                else
                        if(aux1 == 0b10)

                            printf("%cH",Registross[aux2][1]);     // 1 byte de registro (XH)

                        else

                            printf("%cX",Registross[aux2][1]);     // 2 byte de registro (AX)
            break;

        case 0b10:                                                // Es un inmediato

            printf("%d",auxiliar);
            break;

        case 0b11:                                                // Es memoria

            aux1 = (auxiliar >> 4) & 0X0000000F ;
            aux2 = (auxiliar >> 8);
            if(aux2 > 0)

                printf("[%s + %d]",Registross[aux1],aux2);

            else

                printf("[%s]",Registross[aux1]);
            break;
    }

}













