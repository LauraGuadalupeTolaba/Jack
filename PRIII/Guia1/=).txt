12/03/25

El paquete puede ir en minúscula, el nombre de la clase debe ir la primera mayúscula
Por convención todos los atributos van arriba.

package modelo;

public class Guerrero 
{
  private String nombre;
  private double vitalidad;
  private double armadura; // Si le doy un valor aquí armadura = 500 es inicializarlo y se considera igual en ponerlo en el constructor.
  private double x;
  private double y;
  
  //CONSTRUCTORES

  public Guerrero(String nombre, double x, double y)
  {
    super();
    this.nombre = nombre;
    this.x = x;
    … etc;
  }

  public Guerrero (){} // Constructor sin parametros
  //Sobre carga de constructores.

  public Guerrero( String nombre)
  {
    // this.nombre = nombre;
    this(nombre,0,0); //Con este llama al constructor que posee todos los campor y los inicializa en cero x e y
    
  }

  ¡Aquí!

//Por defecto cuando no hay ningún constructor por defecto crea uno sin parámetro, con que haya uno escrito ya lo toma, y por lo tanto no toma por defecto el constructor sin parámetro.


//Los atributos declarados privados solo los puedo  utilizar *aqui* (Entre los dos corchetes)

//Se utilizan métodos para devolver el valor para ello son los get.

  public //Marco la visibilidad// doublé getVitalidad()  //No va a tener un parámetro ya que es un getter
  {
    return this.vitalidad;
  }

  public void setVitalidad(double vitalidad)
  {
    this.vitalidad=vitalidad;
  } //Modifica la vitalidad
  
  **Fijarme si tiene generar get y set es en -> generar en intelliJ

  public String toString()
  {
   return this.nombre;
  } //Cuando al objeto le pedis que se convierta en string se realiza este método. Representar el objeto en un string. Lo mínimo que necesito para representar el objeto.
*** En el mismo generate esta toString en IntelliJ :)

  public void mover(doublé incX, double incY)
  {
    this.y += incY;
    this.x += incX;
  }

  public void recibeDano(double cantidad)
  { 
    this.armadura -= cantidad;
    if(this.armadura < 0)
    {
      this.armadura=0;
      this.vitalidad += this.armadura;
    }
  }




}
-------------------------------------------------------------------------------------


Las clases hay que agregarlas
>>>>>>>  " import modelo.Guerrero; "

package prueba;
public class Prueba{
 public static void main(String[] args)
 {
   Guerrero guerrero1 = new Guerrero(); // Se creo en el heap.
   // No siempre coincide el constructor con la clase.
   System.out.println(guerrero1.vitalidad); // Como vitalidad es privado no se puede mostrar salta un error :/ no se puede modificar. Ya que el atributo es privado sino rompemos el encapsulamiento, cada objeto es responsable de sus datos.

//Si la clase se declara privada no se podría acceder.

    "texto" + guerrero1.getNombre() +"texto" -> Concatena los String.

   
  //CONSTRUCTORES

  Guerrero g2 = new Guerrero("Legolas"); // Salta error porque no existe el constructor. Por convención se pone los constructores debajo de los atributos y luego de ello van los métodos.
 //Los constructores tienen el mismo nombre que la clase

//Osea que el constructor va en la clase *Arriba*
  
  System.out.println(g2); // Nos muestra solo el nombre lo demás en cero.

 Si yo saco EL constructor sin parámetros estoy obligado en "new Guerrero()" ponerle un nombre con lo cual queda -> "new Guerrero("Aragorn")"

Al sacar los setter estoy sacando la posibilidad de modificación.

 }

Tipos de datos primitivos 

Los objetos

No hace falta inicializarlos 

--------------------------------------------------------------------------

String -> Es un Objeto, no es un primitvo.


--------------------------------------------------------------------------

             STACK  HEAP
Guerrero g1  g1    -
Guerrero g2  g2    -

g1= new Guerrero("Aragorn")  g1 -> "Aragorn"
g2= SAme a lo de arriba(¨Legilas¨)
Guerrero g3=g1 // Se crea g3 que se referencia a g1

g2= new Guerrero("Jon Snow") // Con lo cual lo cual "Legolas" que se encuentra en el HEAP se pierde y se crea un nuevo objeto.

g2= NULL //Saca la referencia.
 


